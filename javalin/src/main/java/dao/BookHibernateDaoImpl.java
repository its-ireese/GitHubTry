package dao;

import java.util.ArrayList;
import java.util.List;

import javax.persistence.Query;

import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.Transaction;

import entity.Book;
import exception.ApplicationException;
import pojo.BookPojo;

public class BookHibernateDaoImpl implements BookDao {

	private static final Object bookId = null;

	@Override
	public BookPojo addBook(BookPojo bookPojo) throws ApplicationException {
		// copy the contents of bookPojo into newBook entity
		Book newBook = new Book(bookPojo.getBookId(), bookPojo.getBookTitle(), bookPojo.getBookGenre(),
				bookPojo.getBookAuthor(), bookPojo.getBookCost(), bookPojo.isBookRemoved());

		// write the steps for hibernate
		// obtain the session factory
		SessionFactory sessionFactory = HibernateUtil.getSessionFactory();

		// open the session using the session factory
		Session session = sessionFactory.openSession();

		// begin a transaction
		Transaction transaction = session.beginTransaction();

		// perform the CRUD - insert the book record in DB
		session.save(newBook);
		session.flush();

		// commit the transaction
		transaction.commit();

		// close the session
		session.close();

		// assign the autogenerated primary key value which is present in the entity
		// obkect to the pojo object
		bookPojo.setBookId(newBook.getBookId());

		return bookPojo;
	}

	@Override
	public BookPojo updateBook(BookPojo bookPojo) throws ApplicationException {
		// copy the contents of bookPojo into newBook entity
				Book updateBookEntity = new Book(bookPojo.getBookId(), bookPojo.getBookTitle(), bookPojo.getBookGenre(), bookPojo.getBookAuthor(), bookPojo.getBookCost(), bookPojo.isBookRemoved());
				
		// write the steps for hibernate
		// obtain the session factory
		SessionFactory sessionFactory = HibernateUtil.getSessionFactory();

		// open the session using the session factory
		Session session = sessionFactory.openSession();

		// begin a transaction
		Transaction transaction = session.beginTransaction();

		// perform the CRUD - insert the book record in DB
		session.update(updateBookEntity);
		session.flush();

		// commit the transaction
		transaction.commit();

		// close the session
		session.close();

		//// we return the bookPojo as it is because the contents of updateBookEntity
		return bookPojo;
	}

	@Override
	public boolean deleteBook(int id) throws ApplicationException {
		// write the steps for hibernate
		// obtain the session factory
		SessionFactory sessionFactory = HibernateUtil.getSessionFactory();

		// open the session using the session factory
		Session session = sessionFactory.openSession();

		// begin a transaction
		Transaction transaction = session.beginTransaction();

		// perform the CRUD - for delete, first fetch the record for the id and then
		// delete the entity object
		Book book = session.find(Book.class, bookId);
		session.delete(book);
		// could do a soft delete by calling session.update()
		// book.setBookRemoved(true);
		// session.update(book)

		// commit the transaction
		transaction.commit();

		// close the session
		session.close();
		
		// return true
		return true;
	}

	@Override
	public List<BookPojo> getAllBooks() throws ApplicationException {
		// we work with HQL - Hibernate Querying Language
		// HQL works on the entity classes and no on the underlying table
		// HQL query to fetch all the record from book_details table - "from Book"
		// HQL query to fetch books of Comedy Genre = Comedy
		// obtain the session factory
		SessionFactory sessionFactory = HibernateUtil.getSessionFactory();

		// open the session using the session factory
		Session session = sessionFactory.openSession();

		// begin a transaction
		Transaction transaction = session.beginTransaction();
		
		Query query = session.createQuery("from Book");
		List<Book> allBooksEntity = query.getResultList();
		List<BookPojo> allBooksPojo = new ArrayList<BookPojo>();
		//iterating through the collection of book entities(allBooksEntity) and copying them 
			// into a collection of book pojos (allBooksPojo)
		allBooksEntity.forEach((bookEntity) -> {
			BookPojo bookPojo = new BookPojo(book.getBookId(), book.getBookTitle(), book.getBookGenre(), book.getBookAuthor(), book.getBookCost(), book.isBookRemoved());
			allBooksPojo.add(bookPojo);
		});

		// commit the transaction
		transaction.commit();

		// close the session
		session.close();

		return allBooksPojo;
	}

	@Override
	public BookPojo getABook(int id) throws ApplicationException {

		// write the steps for hibernate
		// obtain the session factory
		SessionFactory sessionFactory = HibernateUtil.getSessionFactory();

		// open the session using the session factory
		Session session = sessionFactory.openSession();

		// begin a transaction
		Transaction transaction = session.beginTransaction();

		// perform the CRUD - fetch the book record by passing bookId in DB
		Book book = session.find(Book.class, bookId);

		// commit the transaction
		transaction.commit();

		// close the session
		session.close();

		// copy the contents of entity object into pojo object and return it
		BookPojo bookPojo = new BookPojo(book.getBookId(), book.getBookTitle(), book.getBookGenre(), book.getBookAuthor(), book.getBookCost(), book.isBookRemoved(), null);
		
		return bookPojo;
	}

	@Override
	public void exitApplication() {
		// destroying the registry and closing the session factory
				HibernateUtil.shutdown();
	}

}
